Ch. 8 Address Translation

8.1 Address Translation Concept

Translator converts
- virtual memory addresses generated by program/processor
- into physical memory addresses

Address translation goals:
- Memory protection: Prevent a process from accessing
  certain memory regions
- Memory sharing: Processes may want to share selected regions of memory
- Flexible memory placement: Place processes anywhere in physical memory
- Sparse addresses: 64-bit addresses 
  -> translate complex/costly
- Runtime lookup efficiency: must be faster than executing an instruction itself
- Compact translation tables: Want space overhead to be small
- Portability: OS kernel data structures must match HW translation system

The base+bounds approach:
- Generate address X in range [0-bounds]
- Translation: add base to X to get physical address

Pros:
- Simple
- Fast, 2 registers, adders and comparator
- Efficient context switch: only need to change two registers

Cons:
- Can't prevent program from overwriting own
- Difficult to share memory region between processes
- Can't grow heap/stack dynamically (memory must be contigious)

Segmented Memory

Segmentation: An array (in HW) of pairs of base+bounds registers, for each process

- A segment is a contiguous region of memory
	- Virtual or (for now) physical memory
- Each process has a segment table (in HW)
	- Entry in table = segment
	- HW table must be loaded from main memory (PCB) upon
	  context switch
- Segment can be located anywhere in physical memory (and can be of variable size)
	- Base
	- Bound (length)
	- Access permission (read-only, read/write)
- Processes can share segments
	- Same base, bounds, same/different access permissions






















